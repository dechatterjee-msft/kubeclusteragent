package agent_data_store

// Code generated by MockGen. DO NOT EDIT.
// Source: kubeclusteragent/pkg/agent (interfaces: Service)

// Package pkg/mocks is a generated GoMock package.

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "kubeclusteragent/gen/go/agent/v1alpha1"
	reflect "reflect"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Audit mocks base method.
func (m *MockService) Audit(arg0 context.Context) (*v1alpha1.AuditHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Audit", arg0)
	ret0, _ := ret[0].(*v1alpha1.AuditHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Audit indicates an expected call of Audit.
func (mr *MockServiceMockRecorder) Audit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Audit", reflect.TypeOf((*MockService)(nil).Audit), arg0)
}

// CreateCluster mocks base method.
func (m *MockService) CreateCluster(arg0 context.Context, arg1 *v1alpha1.CreateClusterRequest) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockServiceMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockService)(nil).CreateCluster), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockService) DeleteCluster(arg0 context.Context) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockServiceMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockService)(nil).DeleteCluster), arg0)
}

// GetCluster mocks base method.
func (m *MockService) GetCluster(arg0 context.Context) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockServiceMockRecorder) GetCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockService)(nil).GetCluster), arg0)
}

// GetKubeConfig mocks base method.
func (m *MockService) GetKubeConfig(arg0 context.Context) (*v1alpha1.Kubeconfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeConfig", arg0)
	ret0, _ := ret[0].(*v1alpha1.Kubeconfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeConfig indicates an expected call of GetKubeConfig.
func (mr *MockServiceMockRecorder) GetKubeConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeConfig", reflect.TypeOf((*MockService)(nil).GetKubeConfig), arg0)
}

// PatchCluster mocks base method.
func (m *MockService) PatchCluster(arg0 context.Context, arg1 *v1alpha1.PatchClusterRequest) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCluster", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchCluster indicates an expected call of PatchCluster.
func (mr *MockServiceMockRecorder) PatchCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCluster", reflect.TypeOf((*MockService)(nil).PatchCluster), arg0, arg1)
}

// ResetKubeconfig mocks base method.
func (m *MockService) ResetKubeconfig(arg0 context.Context) (*v1alpha1.Kubeconfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetKubeconfig", arg0)
	ret0, _ := ret[0].(*v1alpha1.Kubeconfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetKubeconfig indicates an expected call of ResetKubeconfig.
func (mr *MockServiceMockRecorder) ResetKubeconfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetKubeconfig", reflect.TypeOf((*MockService)(nil).ResetKubeconfig), arg0)
}

// UpgradeCluster mocks base method.
func (m *MockService) UpgradeCluster(arg0 context.Context, arg1 *v1alpha1.UpgradeClusterRequest) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeCluster", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeCluster indicates an expected call of UpgradeCluster.
func (mr *MockServiceMockRecorder) UpgradeCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockService)(nil).UpgradeCluster), arg0, arg1)
}
