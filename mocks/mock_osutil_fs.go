// Code generated by MockGen. DO NOT EDIT.
// Source: kubeclusteragent/pkg/util/osutility (interfaces: Filesystem)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	fs "io/fs"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilesystem is a mock of Filesystem interface.
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemMockRecorder
}

// MockFilesystemMockRecorder is the mock recorder for MockFilesystem.
type MockFilesystemMockRecorder struct {
	mock *MockFilesystem
}

// NewMockFilesystem creates a new mock instance.
func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &MockFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystem) EXPECT() *MockFilesystemMockRecorder {
	return m.recorder
}

// Chown mocks base method.
func (m *MockFilesystem) Chown(arg0 context.Context, arg1 string, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chown", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chown indicates an expected call of Chown.
func (mr *MockFilesystemMockRecorder) Chown(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chown", reflect.TypeOf((*MockFilesystem)(nil).Chown), arg0, arg1, arg2, arg3)
}

// Copy mocks base method.
func (m *MockFilesystem) Copy(arg0 context.Context, arg1 io.Writer, arg2 io.Reader) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy.
func (mr *MockFilesystemMockRecorder) Copy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockFilesystem)(nil).Copy), arg0, arg1, arg2)
}

// DeleteLineFromFileByKey mocks base method.
func (m *MockFilesystem) DeleteLineFromFileByKey(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLineFromFileByKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLineFromFileByKey indicates an expected call of DeleteLineFromFileByKey.
func (mr *MockFilesystemMockRecorder) DeleteLineFromFileByKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLineFromFileByKey", reflect.TypeOf((*MockFilesystem)(nil).DeleteLineFromFileByKey), arg0, arg1, arg2)
}

// DownloadFileUsingHttp mocks base method.
func (m *MockFilesystem) DownloadFileUsingHttp(arg0 context.Context, arg1, arg2 string, arg3 fs.FileMode) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFileUsingHttp", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFileUsingHttp indicates an expected call of DownloadFileUsingHttp.
func (mr *MockFilesystemMockRecorder) DownloadFileUsingHttp(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFileUsingHttp", reflect.TypeOf((*MockFilesystem)(nil).DownloadFileUsingHttp), arg0, arg1, arg2, arg3)
}

// Exists mocks base method.
func (m *MockFilesystem) Exists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockFilesystemMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFilesystem)(nil).Exists), arg0, arg1)
}

// ExtractTarFile mocks base method.
func (m *MockFilesystem) ExtractTarFile(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTarFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractTarFile indicates an expected call of ExtractTarFile.
func (mr *MockFilesystemMockRecorder) ExtractTarFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTarFile", reflect.TypeOf((*MockFilesystem)(nil).ExtractTarFile), arg0, arg1, arg2)
}

// MkdirAll mocks base method.
func (m *MockFilesystem) MkdirAll(arg0 context.Context, arg1 string, arg2 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFilesystemMockRecorder) MkdirAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFilesystem)(nil).MkdirAll), arg0, arg1, arg2)
}

// Open mocks base method.
func (m *MockFilesystem) Open(arg0 context.Context, arg1 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFilesystemMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFilesystem)(nil).Open), arg0, arg1)
}

// OpenFileWithPermission mocks base method.
func (m *MockFilesystem) OpenFileWithPermission(arg0 context.Context, arg1 string, arg2 int, arg3 fs.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFileWithPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFileWithPermission indicates an expected call of OpenFileWithPermission.
func (mr *MockFilesystemMockRecorder) OpenFileWithPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFileWithPermission", reflect.TypeOf((*MockFilesystem)(nil).OpenFileWithPermission), arg0, arg1, arg2, arg3)
}

// ReadFile mocks base method.
func (m *MockFilesystem) ReadFile(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFilesystemMockRecorder) ReadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFilesystem)(nil).ReadFile), arg0, arg1)
}

// Remove mocks base method.
func (m *MockFilesystem) Remove(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFilesystemMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFilesystem)(nil).Remove), arg0, arg1)
}

// RemoveAll mocks base method.
func (m *MockFilesystem) RemoveAll(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFilesystemMockRecorder) RemoveAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFilesystem)(nil).RemoveAll), arg0, arg1)
}

// WriteFile mocks base method.
func (m *MockFilesystem) WriteFile(arg0 context.Context, arg1 string, arg2 []byte, arg3 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFilesystemMockRecorder) WriteFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFilesystem)(nil).WriteFile), arg0, arg1, arg2, arg3)
}

// WriteNewLine mocks base method.
func (m *MockFilesystem) WriteNewLine(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteNewLine", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteNewLine indicates an expected call of WriteNewLine.
func (mr *MockFilesystemMockRecorder) WriteNewLine(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteNewLine", reflect.TypeOf((*MockFilesystem)(nil).WriteNewLine), arg0, arg1, arg2)
}
