// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: agent/v1alpha1/agent.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentAPI_GetCluster_FullMethodName           = "/agent.v1alpha1.AgentAPI/GetCluster"
	AgentAPI_CreateCluster_FullMethodName        = "/agent.v1alpha1.AgentAPI/CreateCluster"
	AgentAPI_UpgradeCluster_FullMethodName       = "/agent.v1alpha1.AgentAPI/UpgradeCluster"
	AgentAPI_PatchCluster_FullMethodName         = "/agent.v1alpha1.AgentAPI/PatchCluster"
	AgentAPI_DeleteCluster_FullMethodName        = "/agent.v1alpha1.AgentAPI/DeleteCluster"
	AgentAPI_AuditHistory_FullMethodName         = "/agent.v1alpha1.AgentAPI/AuditHistory"
	AgentAPI_GetKubeconfig_FullMethodName        = "/agent.v1alpha1.AgentAPI/GetKubeconfig"
	AgentAPI_ResetCerts_FullMethodName           = "/agent.v1alpha1.AgentAPI/ResetCerts"
	AgentAPI_GetCerts_FullMethodName             = "/agent.v1alpha1.AgentAPI/GetCerts"
	AgentAPI_GetReconcilerRequest_FullMethodName = "/agent.v1alpha1.AgentAPI/GetReconcilerRequest"
)

// AgentAPIClient is the client API for AgentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentAPIClient interface {
	// Get the current cluster configuration.
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Create a single node cluster.
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Upgrade a single node cluster.
	UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Patch a single node cluster.
	PatchCluster(ctx context.Context, in *PatchClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Remove the current cluster from the node. This resets the node back to its pristine state.
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Series of operations performed on the cluster
	AuditHistory(ctx context.Context, in *AuditHistoryRequest, opts ...grpc.CallOption) (*AuditHistoryResponse, error)
	// Get the cluster's kubeconfig. This is available after a cluster has been initialized.
	GetKubeconfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*Kubeconfig, error)
	// Rotate Cluster Certs. This is available after a cluster has been initialized.
	ResetCerts(ctx context.Context, in *ResetKubeconfigRequest, opts ...grpc.CallOption) (*ResetKubeconfigRequest, error)
	// Get certificate expiry for Kubernetes controlplane certificates
	GetCerts(ctx context.Context, in *ClusterCertificateRequest, opts ...grpc.CallOption) (*ClusterCertificatesResponse, error)
	// Get the status of cluster reconciler
	GetReconcilerRequest(ctx context.Context, in *GetClusterStatusReconcilerRequest, opts ...grpc.CallOption) (*GetClusterStatusReconcilerResponse, error)
}

type agentAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentAPIClient(cc grpc.ClientConnInterface) AgentAPIClient {
	return &agentAPIClient{cc}
}

func (c *agentAPIClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, AgentAPI_GetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, AgentAPI_CreateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, AgentAPI_UpgradeCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) PatchCluster(ctx context.Context, in *PatchClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, AgentAPI_PatchCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, AgentAPI_DeleteCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) AuditHistory(ctx context.Context, in *AuditHistoryRequest, opts ...grpc.CallOption) (*AuditHistoryResponse, error) {
	out := new(AuditHistoryResponse)
	err := c.cc.Invoke(ctx, AgentAPI_AuditHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) GetKubeconfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*Kubeconfig, error) {
	out := new(Kubeconfig)
	err := c.cc.Invoke(ctx, AgentAPI_GetKubeconfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) ResetCerts(ctx context.Context, in *ResetKubeconfigRequest, opts ...grpc.CallOption) (*ResetKubeconfigRequest, error) {
	out := new(ResetKubeconfigRequest)
	err := c.cc.Invoke(ctx, AgentAPI_ResetCerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) GetCerts(ctx context.Context, in *ClusterCertificateRequest, opts ...grpc.CallOption) (*ClusterCertificatesResponse, error) {
	out := new(ClusterCertificatesResponse)
	err := c.cc.Invoke(ctx, AgentAPI_GetCerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) GetReconcilerRequest(ctx context.Context, in *GetClusterStatusReconcilerRequest, opts ...grpc.CallOption) (*GetClusterStatusReconcilerResponse, error) {
	out := new(GetClusterStatusReconcilerResponse)
	err := c.cc.Invoke(ctx, AgentAPI_GetReconcilerRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentAPIServer is the server API for AgentAPI service.
// All implementations must embed UnimplementedAgentAPIServer
// for forward compatibility
type AgentAPIServer interface {
	// Get the current cluster configuration.
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	// Create a single node cluster.
	CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error)
	// Upgrade a single node cluster.
	UpgradeCluster(context.Context, *UpgradeClusterRequest) (*Cluster, error)
	// Patch a single node cluster.
	PatchCluster(context.Context, *PatchClusterRequest) (*Cluster, error)
	// Remove the current cluster from the node. This resets the node back to its pristine state.
	DeleteCluster(context.Context, *DeleteClusterRequest) (*Cluster, error)
	// Series of operations performed on the cluster
	AuditHistory(context.Context, *AuditHistoryRequest) (*AuditHistoryResponse, error)
	// Get the cluster's kubeconfig. This is available after a cluster has been initialized.
	GetKubeconfig(context.Context, *GetKubeconfigRequest) (*Kubeconfig, error)
	// Rotate Cluster Certs. This is available after a cluster has been initialized.
	ResetCerts(context.Context, *ResetKubeconfigRequest) (*ResetKubeconfigRequest, error)
	// Get certificate expiry for Kubernetes controlplane certificates
	GetCerts(context.Context, *ClusterCertificateRequest) (*ClusterCertificatesResponse, error)
	// Get the status of cluster reconciler
	GetReconcilerRequest(context.Context, *GetClusterStatusReconcilerRequest) (*GetClusterStatusReconcilerResponse, error)
	mustEmbedUnimplementedAgentAPIServer()
}

// UnimplementedAgentAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAgentAPIServer struct {
}

func (UnimplementedAgentAPIServer) GetCluster(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedAgentAPIServer) CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedAgentAPIServer) UpgradeCluster(context.Context, *UpgradeClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCluster not implemented")
}
func (UnimplementedAgentAPIServer) PatchCluster(context.Context, *PatchClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCluster not implemented")
}
func (UnimplementedAgentAPIServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedAgentAPIServer) AuditHistory(context.Context, *AuditHistoryRequest) (*AuditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditHistory not implemented")
}
func (UnimplementedAgentAPIServer) GetKubeconfig(context.Context, *GetKubeconfigRequest) (*Kubeconfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeconfig not implemented")
}
func (UnimplementedAgentAPIServer) ResetCerts(context.Context, *ResetKubeconfigRequest) (*ResetKubeconfigRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCerts not implemented")
}
func (UnimplementedAgentAPIServer) GetCerts(context.Context, *ClusterCertificateRequest) (*ClusterCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCerts not implemented")
}
func (UnimplementedAgentAPIServer) GetReconcilerRequest(context.Context, *GetClusterStatusReconcilerRequest) (*GetClusterStatusReconcilerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReconcilerRequest not implemented")
}
func (UnimplementedAgentAPIServer) mustEmbedUnimplementedAgentAPIServer() {}

// UnsafeAgentAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentAPIServer will
// result in compilation errors.
type UnsafeAgentAPIServer interface {
	mustEmbedUnimplementedAgentAPIServer()
}

func RegisterAgentAPIServer(s grpc.ServiceRegistrar, srv AgentAPIServer) {
	s.RegisterService(&AgentAPI_ServiceDesc, srv)
}

func _AgentAPI_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_UpgradeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).UpgradeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_UpgradeCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).UpgradeCluster(ctx, req.(*UpgradeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_PatchCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).PatchCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_PatchCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).PatchCluster(ctx, req.(*PatchClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_AuditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).AuditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_AuditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).AuditHistory(ctx, req.(*AuditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_GetKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).GetKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_GetKubeconfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).GetKubeconfig(ctx, req.(*GetKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_ResetCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).ResetCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_ResetCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).ResetCerts(ctx, req.(*ResetKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_GetCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).GetCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_GetCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).GetCerts(ctx, req.(*ClusterCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_GetReconcilerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterStatusReconcilerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).GetReconcilerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAPI_GetReconcilerRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).GetReconcilerRequest(ctx, req.(*GetClusterStatusReconcilerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentAPI_ServiceDesc is the grpc.ServiceDesc for AgentAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.v1alpha1.AgentAPI",
	HandlerType: (*AgentAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCluster",
			Handler:    _AgentAPI_GetCluster_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _AgentAPI_CreateCluster_Handler,
		},
		{
			MethodName: "UpgradeCluster",
			Handler:    _AgentAPI_UpgradeCluster_Handler,
		},
		{
			MethodName: "PatchCluster",
			Handler:    _AgentAPI_PatchCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _AgentAPI_DeleteCluster_Handler,
		},
		{
			MethodName: "AuditHistory",
			Handler:    _AgentAPI_AuditHistory_Handler,
		},
		{
			MethodName: "GetKubeconfig",
			Handler:    _AgentAPI_GetKubeconfig_Handler,
		},
		{
			MethodName: "ResetCerts",
			Handler:    _AgentAPI_ResetCerts_Handler,
		},
		{
			MethodName: "GetCerts",
			Handler:    _AgentAPI_GetCerts_Handler,
		},
		{
			MethodName: "GetReconcilerRequest",
			Handler:    _AgentAPI_GetReconcilerRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/v1alpha1/agent.proto",
}
